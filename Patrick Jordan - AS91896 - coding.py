import tkinter as tk
from tkinter import ttk, messagebox, PhotoImage, Label
import random
import json
import os

"""File paths"""
hire_orders_file = "hire_orders.json"
return_orders_file = "return_orders.json"

"""Global Variables"""
randomList = [] # A list to store unique receipt numbers generated by my code
hire_orders = [] # A text file list to keep track of all hire orders
return_orders = [] # A text file list to keep track of all return orders
print_order_window = None # Helps check if the orders window is already open.
hire_window_instance = None # Helps check if the hire window is already open.
return_window_instance = None# Helps check if the return window is already open.
messagebox_active = False  # To check if a messagebox is currently active

def load_orders(file):  
    """Load orders from a JSON file."""
    if os.path.exists(file):
        with open(file, "r") as f:
            orders = json.load(f)
            # Convert receipt numbers to integers
            for order in orders:
                order[0] = int(order[0])
            return orders
    return []

def save_orders(file, orders):
    """Save orders to a JSON file."""
    # Convert receipt numbers (interger) to strings
    for order in orders:
        order[0] = str(order[0])
    # Opens the text file and write the orders on it and saves it
    with open(file, "w") as f:
        json.dump(orders, f)

def initialise_data():
    """Load hire and return orders."""
    global hire_orders, return_orders
    hire_orders = load_orders(hire_orders_file)
    return_orders = load_orders(return_orders_file)

def generate_unique_receipt_number():
    """Generate a unique receipt number."""
    while True:
        receipt_number = random.randint(1000000, 9000000)
        if receipt_number not in randomList:
            randomList.append(receipt_number)
            return receipt_number

def show_message(title, message, message_type="info"):
    """Show a message box and ensure it's modal."""
    global messagebox_active
    # If a messagebox is already active, do nothing
    if messagebox_active:
        return
    messagebox_active = True
    # Display the appropriate type of messagebox
    if message_type == "info":
        messagebox.showinfo(title, message)
    elif message_type == "warning":
        messagebox.showwarning(title, message)
    elif message_type == "error":
        messagebox.showerror(title, message)
    messagebox_active = False

def validate_order(first_name, last_name, numofitem):
    """Validate the hire order input fields."""
    max_name_length = 20

    if not first_name.replace(' ', '').isalpha() or not last_name.replace(' ', '').isalpha():
        show_message("Warning", "First and Last names can only contain letters", "warning")
        return False

    if len(first_name) > max_name_length or len(last_name) > max_name_length:
        show_message("Warning", f"First and Last names cannot exceed {max_name_length} characters", "warning")
        return False

    if not numofitem.isdigit() or not (1 <= int(numofitem) <= 500):
        show_message("Warning", "Number of items to be hired can only go up to 500", "warning")
        return False

    return True

def validate_return_order(receipt_number, numofitem):
    """Validate the return order input fields."""
    if not numofitem.isdigit() or not (1 <= int(numofitem) <= 500):
        show_message("Warning", "Number of items that can be returned is up to 500 items", "warning")
        return False
    if not any(order[0] == int(receipt_number) for order in hire_orders):
        show_message("Warning", "Receipt number does not exist", "warning")
        return False
    return True

def add_hire_order():
    """Add a new hire order."""
    if messagebox_active:
        return  # Prevent further action while a message box is active

    first_name = enter_first_name.get().strip()
    last_name = enter_last_name.get().strip()
    numofitem = enter_number_hired.get().strip()

    if validate_order(first_name, last_name, numofitem):
        receipt_number = generate_unique_receipt_number()
        item = enter_item.get().strip()
        name = f"{first_name} {last_name}"
        hire_orders.append([receipt_number, name, item, numofitem])
        enter_first_name.delete(0, 'end')
        enter_last_name.delete(0, 'end')
        enter_item.set('')
        enter_number_hired.delete(0, 'end')
        save_orders(hire_orders_file, hire_orders)
        show_message("Status", "Hire order added successfully", "info")
        refresh_order_window()
        update_receipt_number_combobox()
    else:
        show_message("Warning", "Please fill out all fields correctly", "warning")

def add_return_order():
    """Add a new return order."""
    if messagebox_active:
        return  

    receipt_number = enter_receipt_number.get().strip()
    numofitem = enter_number_hired_return.get().strip()

    if validate_return_order(receipt_number, numofitem):
        item = enter_item_return.get().strip() 
        return_orders.append([receipt_number, item, numofitem])
        update_hire_order(receipt_number, item, numofitem)
        enter_receipt_number.set('')
        enter_item_return.set('')
        enter_number_hired_return.delete(0, 'end')
        save_orders(return_orders_file, return_orders)
        show_message("Status", "Return order added successfully", "info")
        refresh_order_window()
    else:
        show_message("Warning", "Please fill out all fields correctly", "warning")

def update_hire_order(receipt_number, item, numofitem):
    """Update the hire order when items are returned."""
    global hire_orders
    for order in hire_orders:
        if order[0] == int(receipt_number) and order[2] == item:
            remaining_items = int(order[3]) - int(numofitem)
            if remaining_items < 0:
                show_message("Error", "Cannot return more than ordered", "error")
                return
            if remaining_items > 0:
                hire_orders[hire_orders.index(order)] = [order[0], order[1], order[2], str(remaining_items)]
            else:
                hire_orders.remove(order)
            save_orders(hire_orders_file, hire_orders)
            break

def delete_order(receipt_number, order_list):
    """Delete an order from the specified list."""
    global hire_orders, return_orders
    receipt_number = int(receipt_number)  # Ensure receipt number is an integer
    if order_list == "hire":
        hire_orders[:] = [order for order in hire_orders if order[0] != receipt_number]
        save_orders(hire_orders_file, hire_orders)
    elif order_list == "return":
        return_orders[:] = [order for order in return_orders if int(order[0]) != receipt_number]  
        save_orders(return_orders_file, return_orders)
    show_message("Status", f"Order with receipt number {receipt_number} deleted", "info")
    refresh_order_window()

    
def refresh_order_window():
    """Refresh the orders window."""
    global print_order_window, hire_tree, return_tree

    if print_order_window is None or not print_order_window.winfo_exists():
        display_orders()
    else:
        hire_tree.delete(*hire_tree.get_children())
        return_tree.delete(*return_tree.get_children())
        for order_item in hire_orders:
            hire_tree.insert("", tk.END, values=order_item)
        for order_item in return_orders:
            return_tree.insert("", tk.END, values=order_item)
            
def update_receipt_number_combobox():
    """Update the receipt number combobox in the return window."""
    if return_window_instance and return_window_instance.winfo_exists():
        enter_receipt_number['values'] = [order[0] for order in hire_orders]

def display_orders():
    """Display the orders in a new window to the right of the main window."""
    global print_order_window, hire_tree, return_tree

    if print_order_window is not None and print_order_window.winfo_exists():
        print_order_window.destroy()

    main_window.withdraw()

    # Get the main window's dimensions and position
    main_x = main_window.winfo_x()
    main_y = main_window.winfo_y()
    main_width = main_window.winfo_width()
    main_height = main_window.winfo_height()

    # Define the new window's dimensions and position
    window_width = 900
    window_height = 900
    new_x = main_x + main_width  # Position the new window to the right of the main window
    new_y = main_y  # Align it with the top of the main window

    print_order_window = tk.Toplevel(main_window)
    print_order_window.title("Orders")
    print_order_window.geometry(f"{window_width}x{window_height}+{new_x}+{new_y}")
    print_order_window.configure(background="#caf0f8")

    hire_columns = ("Receipt Number", "Name", "Item", "Number of Items Hired")
    return_columns = ("Receipt Number", "Item", "Number of Items Returned")

    tk.Label(print_order_window, text="Hire Orders", bg="#caf0f8", font=("Comic Sans", 13)).pack(pady=10)
    hire_tree = ttk.Treeview(print_order_window, columns=hire_columns, show="headings", height=10)

    for col in hire_columns:
        hire_tree.heading(col, text=col)
        hire_tree.column(col, width=150, anchor='center')

    for order_item in hire_orders:
        hire_tree.insert("", tk.END, values=order_item)

    hire_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    tk.Label(print_order_window, text="Return Orders", bg="#caf0f8", font=("Comic Sans", 13)).pack(pady=10)
    return_tree = ttk.Treeview(print_order_window, columns=return_columns, show="headings", height=10)

    for col in return_columns:
        return_tree.heading(col, text=col)
        return_tree.column(col, width=150, anchor='center')

    for order_item in return_orders:
        return_tree.insert("", tk.END, values=order_item)

    return_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # Configure the style of the Treeview to match the background color of the window
    style = ttk.Style()
    style.theme_use('alt')
    style.configure("Treeview",
                    background="#caf0f8",  # Set the background color of tree view rows
                    fieldbackground="#caf0f8",  # Set the background color of tree view fields
                    rowheight=25,  # Set the row height for each data
                    font=("Comic Sans", 12),  # Font styling
                    foreground="black"  # Text color
                    )

    hire_tree.tag_configure('oddrow', background="#caf0f8")
    hire_tree.tag_configure('evenrow', background="#90e0ef")

    def delete_selected(tree, order_list):
        """Delete the selected item from the tree."""
        selected_item = tree.selection()
        if not selected_item:
            show_message("Error", "Please select an item to delete.", "error")
            return
        receipt_number = tree.item(selected_item)['values'][0]

        if messagebox.askyesno("Confirmation", f"Are you sure you want to delete order with receipt number {receipt_number}?"):
            delete_order(receipt_number, order_list)
            print_order_window.attributes("-top", True)

    tk.Button(print_order_window, text='Delete Selected Hire Order', command=lambda: delete_selected(hire_tree, "hire"), bg="crimson").pack(side=tk.TOP, padx=10, pady=5)
    tk.Button(print_order_window, text='Delete Selected Return Order', command=lambda: delete_selected(return_tree, "return"), bg="crimson").pack(side=tk.TOP, padx=10, pady=5)
    tk.Button(print_order_window, text='Back to menu', command=close_display_window, bg="gray").pack(side=tk.BOTTOM, padx=1)

def hire_window():
    """Open the hire window and hide the main menu."""
    global hire_window_instance, enter_first_name, enter_last_name, enter_item, enter_number_hired

    if hire_window_instance is not None and hire_window_instance.winfo_exists():
        hire_window_instance.lift()
        return

    main_window.withdraw()  # Hide the main menu

    hire_window_instance = tk.Toplevel(main_window)
    hire_window_instance.title("Add Hire Order")
    hire_window_instance.geometry("410x320")
    hire_window_instance.configure(background="#caf0f8")

    # Create a frame for the input fields and buttons together
    main_frame = tk.Frame(hire_window_instance, bg="#caf0f8")
    main_frame.grid(row=0, column=0, padx=10, pady=10, sticky='nsew')

    # Create labels and entry boxes
    label_font = ("Comic Sans", 12)
    entry_width = 25

    tk.Label(main_frame, text="First Name:", font=label_font, bg="#caf0f8").grid(row=0, column=0, padx=5, pady=5, sticky='e')
    enter_first_name = tk.Entry(main_frame, font=label_font, width=entry_width)
    enter_first_name.grid(row=0, column=1, padx=5, pady=5, sticky='ew')

    tk.Label(main_frame, text="Last Name:", font=label_font, bg="#caf0f8").grid(row=1, column=0, padx=5, pady=5, sticky='e')
    enter_last_name = tk.Entry(main_frame, font=label_font, width=entry_width)
    enter_last_name.grid(row=1, column=1, padx=5, pady=5, sticky='ew')

    tk.Label(main_frame, text="Item:", font=label_font, bg="#caf0f8").grid(row=2, column=0, padx=5, pady=5, sticky='e')
    enter_item = ttk.Combobox(main_frame, font=label_font, width=entry_width, state="readonly")
    enter_item['values'] = [
    'Tablecloth', 'Plates', 'Cups', 'Napkins', 'Serving Trays',
    'Ice Buckets', 'Coolers', 'Utensils', 'Chafing Dishes', 'Pitchers',
    'Bowls', 'Serving Spoons', 'Table Decorations', 'Candles', 'Chairs',
    'Tables', 'Trash Bags', 'Recycling Bins', 'Cleaning Sprays', 'Sponges',
    'Paper Towels', 'Forks', 'Knives', 'Spoons', 'Butter Knives',
    'Salad Forks', 'Soup Spoons', 'Balloons', 'Banners', 'Confetti'
    ]
    enter_item.grid(row=2, column=1, padx=5, pady=5, sticky='ew')
    
    tk.Label(main_frame, text="Number of Items:", font=label_font, bg="#caf0f8").grid(row=3, column=0, padx=5, pady=5, sticky='e')
    enter_number_hired = tk.Entry(main_frame, font=label_font, width=entry_width)
    enter_number_hired.grid(row=3, column=1, padx=5, pady=5, sticky='ew')

    # Create buttons below the entry boxes
    button_font = ("Comic Sans", 12)
    button_width = entry_width
    button_height = 1

    tk.Button(main_frame, text="Add Hire Order", font=button_font, bg="#90e0ef", width=button_width, height=button_height, command=add_hire_order).grid(row=4, column=0, columnspan=2, padx=5, pady=5, sticky='ew')
    tk.Button(main_frame, text="Display Orders", font=button_font, bg="#90e0ef", width=button_width, height=button_height, command=display_orders).grid(row=5, column=0, columnspan=2, padx=5, pady=5, sticky='ew')
    tk.Button(main_frame, text="Switch to Return Window", font=button_font, bg="#90e0ef", width=button_width, height=button_height, command=switch_to_return_window).grid(row=6, column=0, columnspan=2, padx=5, pady=5, sticky='ew')
    tk.Button(main_frame, text="Back to Menu", font=button_font, bg="#f0a500", fg="#ffffff", width=button_width, height=button_height, command=lambda: close_hire_window(hire_window_instance)).grid(row=7, column=0, columnspan=2, padx=5, pady=5, sticky='ew')

    # Adjust row and column weights
    hire_window_instance.grid_rowconfigure(0, weight=1)
    hire_window_instance.grid_columnconfigure(0, weight=1)

def return_window():
    """Open the return window and hide the main menu."""
    global return_window_instance, enter_receipt_number, enter_item_return, enter_number_hired_return

    if return_window_instance is not None and return_window_instance.winfo_exists():
        return_window_instance.lift()
        return

    main_window.withdraw()  # Hide the main menu

    return_window_instance = tk.Toplevel(main_window)
    return_window_instance.title("Add Return Order")
    return_window_instance.geometry("410x290")
    return_window_instance.configure(background="#caf0f8")

    # Create a frame for the input fields and buttons together
    main_frame = tk.Frame(return_window_instance, bg="#caf0f8")
    main_frame.grid(row=0, column=0, padx=10, pady=10, sticky='nsew')

    # Create labels and entry boxes
    label_font = ("Comic Sans", 12)
    entry_width = 25

    tk.Label(main_frame, text="Receipt Number:", font=label_font, bg="#caf0f8").grid(row=0, column=0, padx=5, pady=5, sticky='e')
    enter_receipt_number = ttk.Combobox(main_frame, font=label_font, width=entry_width, state="readonly")
    enter_receipt_number.grid(row=0, column=1, padx=5, pady=5, sticky='ew')
    update_receipt_number_combobox()  # Populate the combobox with values
    
    tk.Label(main_frame, text="Item:", font=label_font, bg="#caf0f8").grid(row=1, column=0, padx=5, pady=5, sticky='e')
    enter_item_return = ttk.Combobox(main_frame, font=label_font, width=entry_width, state="readonly")
    enter_item_return['values'] = [
        'Tablecloth', 'Plates', 'Cups', 'Napkins', 'Serving Trays',
        'Ice Buckets', 'Coolers', 'Utensils', 'Chafing Dishes', 'Pitchers',
        'Bowls', 'Serving Spoons', 'Table Decorations', 'Candles', 'Chairs',
        'Tables', 'Trash Bags', 'Recycling Bins', 'Cleaning Sprays', 'Sponges',
        'Paper Towels', 'Forks', 'Knives', 'Spoons', 'Butter Knives',
        'Salad Forks', 'Soup Spoons', 'Balloons', 'Banners', 'Confetti'
    ]
    enter_item_return.grid(row=1, column=1, padx=5, pady=5, sticky='ew')

    tk.Label(main_frame, text="Number of Items:", font=label_font, bg="#caf0f8").grid(row=2, column=0, padx=5, pady=5, sticky='e')
    enter_number_hired_return = tk.Entry(main_frame, font=label_font, width=entry_width)
    enter_number_hired_return.grid(row=2, column=1, padx=5, pady=5, sticky='ew')

    # Create buttons below the entry boxes
    button_font = ("Comic Sans", 12)
    button_width = entry_width
    button_height = 1

    tk.Button(main_frame, text="Add Return Order", font=button_font, bg="#90e0ef", width=button_width, height=button_height, command=add_return_order).grid(row=3, column=0, columnspan=2, padx=5, pady=5, sticky='ew')
    tk.Button(main_frame, text="Display Orders", font=button_font, bg="#90e0ef", width=button_width, height=button_height, command=display_orders).grid(row=4, column=0, columnspan=2, padx=5, pady=5, sticky='ew')
    tk.Button(main_frame, text="Switch to Hire Window", font=button_font, bg="#90e0ef", width=button_width, height=button_height, command=switch_to_hire_window).grid(row=5, column=0, columnspan=2, padx=5, pady=5, sticky='ew')
    tk.Button(main_frame, text="Back to Menu", font=button_font, bg="#f0a500", fg="#ffffff", width=button_width, height=button_height, command=lambda: close_return_window(return_window_instance)).grid(row=6, column=0, columnspan=2, padx=5, pady=5, sticky='ew')

    # Adjust row and column weights
    return_window_instance.grid_rowconfigure(0, weight=1)
    return_window_instance.grid_columnconfigure(0, weight=1)

def close_hire_window(window):
    """Close the hire window and show the main menu."""
    if messagebox.askyesno("Confirmation", "Are you sure you want to go back to the menu?"):
        window.destroy()
        main_window.deiconify()

def close_return_window(window):
    """Close the return window and show the main menu."""
    if messagebox.askyesno("Confirmation", "Are you sure you want to go back to the menu?"):
        window.destroy()
        main_window.deiconify()

def close_display_window():
    """Close the display orders window and return to the main menu."""
    if print_order_window is not None and print_order_window.winfo_exists():
        print_order_window.destroy()
    main_window.deiconify()

def switch_to_hire_window():
    """Switch to the hire window."""
    if return_window_instance:
        return_window_instance.destroy()
    hire_window()

def switch_to_return_window():
    """Switch to the return window."""
    if hire_window_instance:
        hire_window_instance.destroy()
    return_window()


# Main function to set up and run the application
initialise_data()
main_window = tk.Tk()
main_window.title("Party Hire Store")

# Load image and get its dimensions
image_path = "Juile.png"
back = PhotoImage(file=image_path)
image_width = back.width()
image_height = back.height()

# Set window size to image size
main_window.geometry(f"{image_width}x{image_height}")

my_label = Label(main_window, image=back)
my_label.place(x=0, y=0, relwidth=1, relheight=1)

# Create a frame to hold the buttons and center it
button_frame = tk.Frame(main_window, bg="#caf0f8")
button_frame.place(relx=0.5, rely=0.7, anchor='center')

# Modify the colors of the buttons
button_bg_color = "#f0a500"  
button_fg_color = "#ffffff"  

tk.Button(button_frame, text="Hire", command=hire_window, width=30, bg=button_bg_color, fg=button_fg_color).pack(pady=5)
tk.Button(button_frame, text="Return", command=return_window, width=30, bg=button_bg_color, fg=button_fg_color).pack(pady=5)
tk.Button(button_frame, text="Print Orders", command=display_orders, width=30, bg=button_bg_color, fg=button_fg_color).pack(pady=5)
tk.Button(button_frame, text="Exit", command=main_window.destroy, width=30, bg=button_bg_color, fg=button_fg_color).pack(pady=5)

main_window.mainloop()
